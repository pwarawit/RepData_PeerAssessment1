install.packages("swirl")
search()
library(swirl)
search()
ls()
vect
x
y
library(swirl)
rm(list=ls())
ls()
swirl()
q()
?solve
?Solve
?solve
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
pi
pi/4
sin(pi/4)
hof <- function(f, x) cat()
sprintf("The value of y at x = %s is %s.\n", x, f(x))
sprintf("The value of y at x = %s is %s.\n", x, f(x)))
hof <- function(f, x) cat(sprintf("The value of y at x = %s is %s.\n", x, f(x)))
hof(mean, c(1,2,3))
hof(function(x) 2*x, 10)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
?rnorm
dnorm(0)
dnorm(1)
pnorm(1)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
?set.seed
q()
load(httr)
library(httr)
?httr
?oauth_app
?sign_oaut1.0
?sign_oauth1.0
myapp = oauth_app("github", key="5ab8ba2be0989442ccb8", secret="df093ef124873caed6217322d1de5579206d1be1")
myapp
sig = sign_oauth1.0(myapp, token="5ab8ba2be0989442ccb8", token_secret="df093ef124873caed6217322d1de5579206d1be1")
sig
homeTL = GET("https://api.github.com/users/jtleek/repos", sig)
homeTL
?oauth_endpoints
github <- oauth_endpoints("github")
github
myapp<- oauth_app("github", key="5ab8ba2be0989442ccb8", secret="df093ef124873caed6217322d1de5579206d1be1")
myapp
github_token <- oauth2.0_token(github, myapp)
github_token <- oauth2.0_token(github, myapp)
library(httpuv)
utils:::menuInstallPkgs()
library(httpuv)
github_token <- oauth2.0_token(github, myapp)
homeTL = GET("https://api.github.com/users/jtleek/repos")
homeTL
str(homeTL)
library(jsonlite)
utils:::menuInstallPkgs()
library(jsonlite)
jsondata <- fromjson(homeTL)
jsondata <- fromJSON(homeTL)
jsondata <- fromJSON("ttps://api.github.com/users/jtleek/repos")
jsondata <- fromJSON("https://api.github.com/users/jtleek/repos")
jsondata <- fromJSON("https://api.github.com/users/jtleek/repos")
jsondata
str(jsondata)
names(jsondata)
jsondata$name
jsondata$created_by
jsondata$created_at
jsondata[jsondata$name=="datasharing"]
jsondata[jsondata$name=="datasharing",]
jsondata[,jsondata$name=="datasharing"]
jsondata[,jsondata$name=="datasharing",]
subset(jsondata, jsondata$name=="datasharing")
subset(jsondata, jsondata$name=="datasharing"
)
jsondata[1,1:3]
jsondata[$name="datasharing",1:3]
jsondata[@$name="datasharing",1:3]
jsondata[@name="datasharing",1:3]
jsondata[name="datasharing",1:3]
jsondata[2="datasharing",1:3]
jsondata[2=="datasharing",1:3]
jsondata[@name=="datasharing",1:3]
jsondata[$@name=="datasharing",1:3]
names(jsondata)
type(jsondata)
types(jsondata)
class(jsondata)
jsondata[,name==c("datasharing")]
jsondata[,c("name","created_at"]
jsondata[,c("name","created_at")]
jsondata[4,c("name","created_at")]
jsondata[5,c("name","created_at")]
getwd()
fileurl <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileurl, destfile="quiz2data.csv")
acs <- as.data.frame(read.csv("quiz2data.csv"))
types(acs)
type(acs)
class(acs)
str(acs)
summary(acs)
str(acs)
library(sqldf)
install::
install.packages("sqldr")
utils:::menuInstallPkgs()
install.packages("sqldf")
sqldf("select * from acs where AGEP < 50")
library(sqldf)
sqldf("select * from acs where AGEP < 50")
sqldf("select pwgtp1 from acs")
head(sqldf("select pwgtp1 from acs"))
head(sqldf("select * from acs where AGEP < 50"))
head(sqldf("select pwgtp1 from acs where AGEP < 50"))
unique(acs$AGEP)
sqldf("select distinct AGEP from acs")
library(httr)
url <- "http://biostat.jhsph.edu/~jleek/contact.html"
url
html2 <- GET(url)
head(html2)
html2
head(html2)
html2
class(html2)
content2 <- conten(html2, as="text")
content2 <- content(html2, as="text")
content2
parseHtml <- htmlParse(content2, asText=TRUE)
?htmlParse
?htmlParse
htmlparse
?htmlparse
content2
html2
html2
readLines(html2)
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readLines(con)
close(con)
htmlCode
class(htmlCode)
htmlCode[10]
htmlCode[c(10,20,30,100)]
nchar(htmlCode[c(10,20,30,100)])
d1 <- read.table("q5.for", header = FALSE, stringsAsFactors = FALSE, skip = 3, nrows=1)
d1
type(d1)
class(d1)
d1 <- read.table("q5.for", header = FALSE, stringsAsFactors = FALSE, skip = 3)
d1 <- read.table("q5.for", header = FALSE, stringsAsFactors = FALSE, skip = 4)
d1 <- read.table("q5.for", header = FALSE, stringsAsFactors = FALSE, skip = 5)
d1 <- read.table("q5.for", header = FALSE, stringsAsFactors = FALSE, skip = 6)
d1 <- read.table("q5.for", header = FALSE, stringsAsFactors = FALSE, skip = 7)
d1
d1 <- read.table("q5.for", header = FALSE, stringsAsFactors = FALSE, skip = 4, nrows=1)
d1
class(d1)
names(d1)
data <- read.fwf("q5.for", widths = c(15, 4, 4), header = FALSE, skip = 4)
data
head(data)
data <- read.fwf("q5.for", widths = c(15, 4, 4,9,9), header = FALSE, skip = 4)
head(data)
data[4]
sum(data[4])
exit
q()
?quantile
exit()
quit()
library(nlem)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
head(airquality)
summary(airquality)
str(airquality)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
setwd("c:/users")
setwd("c:/users/infomobius/documents/githup/repdata_peerassessment1")
setwd("c:/users/infomobius/documents/githup")
setwd("c:/users/infomobius/documents/github/repdata_peerassessment1")
unzip("activity.zip")
act_data <- read.csv("activity.csv")
act_data$interval <- sprintf("%04d",as.numeric(act_data$interval))
act_data$date <- strptime(paste(act_data$date, act_data$interval, sep=" "), format="%Y-%m-%d %H%M")
library(knitr)
library(plyr)
temp1 <- join(act_data, avg_step_interval, by="interval")
temp2 <- temp1[!is.na(temp1$steps),c("steps","date","interval")]
temp3 <- temp1[is.na(temp1$steps),c("avg_steps","date","interval")]
names(temp3) <- c("steps", "date", "interval")
newdata <- arrange(rbind(temp2, temp3), date)
unzip("activity.zip")
act_data <- read.csv("activity.csv")
act_data$interval <- sprintf("%04d",as.numeric(act_data$interval))
act_data$date <- strptime(paste(act_data$date, act_data$interval, sep=" "), format="%Y-%m-%d %H%M")
hist(tapply(act_data$steps, as.Date(act_data$date), sum)
,main="Number of steps per day"
,xlab="Steps per day"
,ylab="Number of days"
,col="Grey"
,ylim=c(1,40)
)
act_mean <- mean(tapply(act_data$steps, as.Date(act_data$date), sum),na.rm=TRUE)
act_median <- median(tapply(act_data$steps, as.Date(act_data$date), sum),na.rm=TRUE)
avg_step_interval <- as.data.frame(tapply(act_data$steps, act_data$interval, mean, na.rm=TRUE))
avg_step_interval <- cbind(as.data.frame(row.names(avg_step_interval)), avg_step_interval)
names(avg_step_interval) <- c("interval","avg_steps")
with(avg_step_interval, {plot(interval, avg_steps, type="l", xlab="Time of day", ylab="Avg steps", main="Daily Activity Pattern" )})
max_step_interval <- avg_step_interval[avg_step_interval$avg_steps==max(avg_step_interval$avg_steps),"interval"]
sum(is.na(act_data$step))
library(plyr)
temp1 <- join(act_data, avg_step_interval, by="interval")
temp2 <- temp1[!is.na(temp1$steps),c("steps","date","interval")]
temp3 <- temp1[is.na(temp1$steps),c("avg_steps","date","interval")]
names(temp3) <- c("steps", "date", "interval")
newdata <- arrange(rbind(temp2, temp3), date)
View(newdata)
par(mfrow = c(1,2))
hist(tapply(act_data$steps, as.Date(act_data$date), sum)
,main="Steps/day - NA ignored"
,xlab="" #"Steps per day"
,ylab="Number of days"
,col="Red"
,ylim=c(1,40)
)
hist(tapply(newdata$steps, as.Date(newdata$date), sum)
,main="Steps/day - NA filled"
,xlab="" #"Steps per day"
,ylab="" #"Number of days"
,col="Blue"
,ylim=c(1,40)
)
act_mean_na_filled <- mean(tapply(newdata$steps, as.Date(act_data$date), sum))
act_median_na_filled <- median(tapply(newdata$steps, as.Date(act_data$date), sum))
newdata$factor <- ifelse(weekdays(as.Date(newdata$date)) %in% c("Saturday","Sunday"),"weekends","weekdays")
View(newdata)
library(lattice)
str(newdata)
with(newdata, tapply(steps, list(interval, factor), mean)
)
aggregate(newdata, by=list(interval, factor), FUN=mean)
aggregate(newdata, by=list(newdata$interval, newdata$factor), FUN=mean)
warning()
str(newdata)
aggregate(newdata, by=list(newdata$factor), FUN=mean)
attach(newdata)
aggregate(newdata, interval, FUN=mean)
aggregate(newdata, by=list(interval), FUN=mean)
View(act_data)
strptime(sprintf("%04d",avg_step_interval$interval), "%H%M")
str(
avg_step_interval)
str(avg_step_interval)
avg_step_interval$interval <- strptime(sprintf("%04d",avg_step_interval$interval), "%H%M")
str(avg_step_interval)
with(avg_step_interval, {plot(interval, avg_steps, type="l", xlab="Time of day", ylab="Avg steps", main="Daily Activity Pattern" )})
View(avg_step_interval)
View(act_data)
aggregate(act_data, by=list(act_data$interval), FUN=mean, na.rm=TRUE)
str(act_data)
act_data <- read.csv("activity.csv")
aggregate(act_data, by=list(act_data$interval), FUN=mean, na.rm=TRUE)
str(act_data
)
strtime(act_data$date, format=""%Y-%m-%d")
strptime(act_data$date, format=""%Y-%m-%d")
strptime(act_data$date, format=%Y-%m-%d")
strptime(act_data$date, format="%Y-%m-%d")
unzip("activity.zip")
act_data <- read.csv("activity.csv")
act_data$interval <- sprintf("%04d",as.numeric(act_data$interval))
#act_data$date <- strptime(paste(act_data$date, act_data$interval, sep=" "), format="%Y-%m-%d %H%M")
act_data$date <- strptime(act_data$date, format="%Y-%m-%d")
View(act_data)
aggregate(act_data, by=list(act_data$interval), FUN=mean, na.rm=TRUE)
aggregate(act_data$steps, by=list(act_data$interval), FUN=mean, na.rm=TRUE)
aggregate(act_data$steps, act_data$interval, FUN=mean, na.rm=TRUE)
aggregate(act_data$steps, list(act_data$interval), FUN=mean, na.rm=TRUE)
aggregate(act_data$steps, list(act_data$interval)=interval, FUN=mean, na.rm=TRUE)
avg_data <- aggregate(act_data$steps, list(act_data$interval), FUN=mean, na.rm=TRUE)
View(avg_data)
View(avg_data)
names(avg_data) <- c("interval", "avg_step")
View(avg_data)
View(avg_data)
#avg_step_interval <- as.data.frame(tapply(act_data$steps, act_data$interval, mean, na.rm=TRUE))
#avg_step_interval <- cbind(as.data.frame(row.names(avg_step_interval)), avg_step_interval)
#names(avg_step_interval) <- c("interval","avg_steps")
#avg_step_interval$interval <- strptime(sprintf("%04d",avg_step_interval$interval), "%H%M")
#with(avg_step_interval, {plot(interval, avg_steps, type="l", xlab="Time of day", ylab="Avg steps", main="Daily Activity Pattern" )})
avg_data <- aggregate(act_data$steps, list(act_data$interval), FUN=mean, na.rm=TRUE)
names(avg_data) <- c("interval", "avg_step")
with(avg_data, {plot(interval, avg_step, type="l", xlab="Time of day", ylab="Avg steps", main="Daily Activity Pattern" )})
with(avg_data, {plot(interval, avg_step, type="l", xlab="Time of day", ylab="Avg steps", main="Daily Activity Pattern" )})
View(avg_data)
str(avg_data)
strptime(sprintf("%04d",avg_data$interval), "%H%M")
strptime(avg_data$interval, "%H%M")
avg_data$interval <- strptime(avg_data$interval, "%H%M")
with(avg_data, {plot(interval, avg_step, type="l", xlab="Time of day", ylab="Avg steps", main="Daily Activity Pattern" )})
max_step_interval <- avg_data[avg_data$avg_step==max(avg_data$avg_step),"interval"]
max_step_interval
avg_data
View(act_data)
View(act_data)
View(avg_data)
View(avg_data)
avg_data <- aggregate(act_data$steps, list(act_data$interval), FUN=mean, na.rm=TRUE)
View(avg_data)
names(avg_data) <- c("interval", "avg_step")
View(avg_data)
avg_data$interval <- strptime(avg_data$interval, "%H%M")
View(avg_data)
max_step_interval <- avg_data[avg_data$avg_step==max(avg_data$avg_step),"interval"]
str(max_step_interval)
strftime(avg_data[avg_data$avg_step==max(avg_data$avg_step),"interval"], format="%H:%M")
temp1 <- join(act_data, avg_data, by="interval")
View(temp1)
View(temp1)
View(act_data)
View(act_data)
View(avg_data)
View(avg_data)
act_data$interval <- strptime(act_data$interval, "%H%M")
library(plyr)
# Convert act_data$interval into the Posix date data for comparison
act_data$interval <- strptime(act_data$interval, "%H%M")
temp1 <- join(act_data, avg_data, by="interval")
temp2 <- temp1[!is.na(temp1$steps),c("steps","date","interval")]
temp3 <- temp1[is.na(temp1$steps),c("avg_step","date","interval")]
names(temp3) <- c("steps", "date", "interval")
newdata <- arrange(rbind(temp2, temp3), date)
View(act_data)
View(act_data)
str(avg_data)
str(act_data)
unzip("activity.zip")
act_data <- read.csv("activity.csv")
act_data$interval <- sprintf("%04d",as.numeric(act_data$interval))
act_data$date <- strptime(act_data$date, format="%Y-%m-%d")
str(act_data)
strftime(avg_data$interval, format="%H%M")
View(avg_data)
View(avg_data)
avg_data$interval <- strftime(avg_data$interval, format="%H%M")
View(avg_data)
View(avg_data)
temp1 <- join(act_data, avg_data, by="interval")
View(newdata)
newdata$factor <- ifelse(weekdays(as.Date(newdata$date)) %in% c("Saturday","Sunday"),"weekends","weekdays")
View(newdata)
View(newdata)
View(newdata)
View(newdata)
unzip("activity.zip")
act_data <- read.csv("activity.csv")
act_data$interval <- sprintf("%04d",as.numeric(act_data$interval))
act_data$date <- strptime(act_data$date, format="%Y-%m-%d")
hist(tapply(act_data$steps, as.Date(act_data$date), sum)
,main="Number of steps per day"
,xlab="Steps per day"
,ylab="Number of days"
,col="Grey"
,ylim=c(1,40)
)
act_mean <- mean(tapply(act_data$steps, as.Date(act_data$date), sum),na.rm=TRUE)
act_median <- median(tapply(act_data$steps, as.Date(act_data$date), sum),na.rm=TRUE)
avg_data <- aggregate(act_data$steps, list(act_data$interval), FUN=mean, na.rm=TRUE)
names(avg_data) <- c("interval", "avg_step")
avg_data$interval <- strptime(avg_data$interval, "%H%M")
with(avg_data, {plot(interval, avg_step, type="l", xlab="Time of day", ylab="Avg steps", main="Daily Activity Pattern" )})
max_step_interval <- strftime(avg_data[avg_data$avg_step==max(avg_data$avg_step),"interval"], format="%H:%M")
sum(is.na(act_data$step))
library(plyr)
# Change the avg_data$interval back to character to join with act_data
avg_data$interval <- strftime(avg_data$interval, format="%H%M")
temp1 <- join(act_data, avg_data, by="interval")
temp2 <- temp1[!is.na(temp1$steps),c("steps","date","interval")]
temp3 <- temp1[is.na(temp1$steps),c("avg_step","date","interval")]
names(temp3) <- c("steps", "date", "interval")
newdata <- arrange(rbind(temp2, temp3), date)
View(newdata)
View(newdata)
par(mfrow = c(1,2))
hist(tapply(act_data$steps, as.Date(act_data$date), sum)
,main="Steps/day - NA ignored"
,xlab="" #"Steps per day"
,ylab="Number of days"
,col="Red"
,ylim=c(1,40)
)
hist(tapply(newdata$steps, as.Date(newdata$date), sum)
,main="Steps/day - NA filled"
,xlab="" #"Steps per day"
,ylab="" #"Number of days"
,col="Blue"
,ylim=c(1,40)
)
act_meaVn_na_filled <- mean(tapply(newdata$steps, as.Date(act_data$date), sum))
act_median_na_filled <- median(tapply(newdata$steps, as.Date(act_data$date), sum))
newdata$factor <- ifelse(weekdays(as.Date(newdata$date)) %in% c("Saturday","Sunday"),"weekends","weekdays")
View(newdata)
View(newdata)
newdata
View(avg_data)
View(avg_data)
aggregate(new_data$steps, list(new_data$factor,new_data$interval), FUN=mean)
aggregate(newdata$steps, list(newdata$factor,newdata$interval), FUN=mean)
avg_newdata <- aggregate(newdata$steps, list(newdata$factor,newdata$interval), FUN=mean)
View(avg_data)
View(avg_newdata)
act_meaVn_na_filled <- mean(tapply(newdata$steps, as.Date(act_data$date), sum))
act_median_na_filled <- median(tapply(newdata$steps, as.Date(act_data$date), sum))
act_mean_na_filled <- mean(tapply(newdata$steps, as.Date(act_data$date), sum))
act_median_na_filled <- median(tapply(newdata$steps, as.Date(act_data$date), sum))
View(avg_newdata)
# Compute the mean of newdata group by weekends/weekday factor and then by interval, put it in avg_newdata
avg_newdata <- aggregate(newdata$steps, list(newdata$factor,newdata$interval), FUN=mean)
names(avg_newdata) <- c("Type of days", "interval", "avg_step")
avg_newdata$interval <- strptime(avg_newdata$interval, "%H%M")
# Plot comparison
#par(mfrow = c(2,1))
#with(wkdays, {plot(interval, avg_steps, type="l", xlab="Time of day", ylab="Avg steps", main="Weekdays Activity Pattern" )})
#with(wkends, {plot(interval, avg_steps, type="l", xlab="Time of day", ylab="Avg steps", main="Weekends Activity Pattern" )})
View(avg_newdata)
View(avg_newdata)
str(avg_newdata)
xyplot(avg_steps, interval | "Type of days", data=avg_newdata, layout=c(1,2))
xyplot(avg_step, interval | "Type of days", data=avg_newdata, layout=c(1,2))
xyplot(avg_step ~ interval | "Type of days", data=avg_newdata, layout=c(1,2))
xyplot(avg_step ~ strftime(interval, format="%H%M") | "Type of days", data=avg_newdata, layout=c(1,2))
library(ggplot2)
qplot(interval, avg_step, data=avg_newdata, facets =.~"Type of days")
qplot(interval, avg_step, data=avg_newdata)
qplot(interval, avg_step, data=avg_newdata, color="Type of Days")
# Compute the mean of newdata group by weekends/weekday factor and then by interval, put it in avg_newdata
avg_newdata <- aggregate(newdata$steps, list(newdata$factor,newdata$interval), FUN=mean)
names(avg_newdata) <- c("DayType", "interval", "avg_step")
avg_newdata$interval <- strptime(avg_newdata$interval, "%H%M")
# Plot comparison
#par(mfrow = c(2,1))
#with(wkdays, {plot(interval, avg_steps, type="l", xlab="Time of day", ylab="Avg steps", main="Weekdays Activity Pattern" )})
#with(wkends, {plot(interval, avg_steps, type="l", xlab="Time of day", ylab="Avg steps", main="Weekends Activity Pattern" )})
qplot(interval, avg_step, data=avg_newdata)
qplot(interval, avg_step, data=avg_newdata, color=DayType)
qplot(interval, avg_step, data=avg_newdata, facets =DayType)
qplot(interval, avg_step, data=avg_newdata, facets = DayType~.)
str(avg_newdata)
with(avg_newdata, {plot(interval, avg_step, type="l")})
avg_newdata
avg_newdata["DayType"=="weekends"]
with(avg_newdata["DayType"=="weekends",], {plot(interval, avg_step, type="l")})
avg_newdata["DayType"=="weekends",]
avg_newdata("DayType"=="weekends")
avg_newdata[avg_newdata$DayType=="weekends"]
avg_newdata[avg_newdata$DayType=="weekends",]
avg_newdata[avg_newdata$DayType=="weekends",]
\
with(avg_newdata[avg_newdata$DayType=="weekends",], {plot(interval, avg_step, type="l")})
with(avg_newdata[avg_newdata$DayType=="weekdays",], {plot(interval, avg_step, type="l")})
# Compute the mean of newdata group by weekends/weekday factor and then by interval, put it in avg_newdata
avg_newdata <- aggregate(newdata$steps, list(newdata$factor,newdata$interval), FUN=mean)
names(avg_newdata) <- c("DayType", "interval", "avg_step")
avg_newdata$interval <- strptime(avg_newdata$interval, "%H%M")
# Create a 2 panels plot, one for each type of day
par(mfcol = c(1, 2)
with(avg_newdata[avg_newdata$DayType=="weekends",], {plot(interval, avg_step, type="l")})
with(avg_newdata[avg_newdata$DayType=="weekdays",], {plot(interval, avg_step, type="l")})
# Plot comparison
#par(mfrow = c(2,1))
#with(wkdays, {plot(interval, avg_steps, type="l", xlab="Time of day", ylab="Avg steps", main="Weekdays Activity Pattern" )})
#with(wkends, {plot(interval, avg_steps, type="l", xlab="Time of day", ylab="Avg steps", main="Weekends Activity Pattern" )})
# Compute the mean of newdata group by weekends/weekday factor and then by interval, put it in avg_newdata
avg_newdata <- aggregate(newdata$steps, list(newdata$factor,newdata$interval), FUN=mean)
names(avg_newdata) <- c("DayType", "interval", "avg_step")
avg_newdata$interval <- strptime(avg_newdata$interval, "%H%M")
# Create a 2 panels plot, one for each type of day
par(mfcol = c(1, 2))
with(avg_newdata[avg_newdata$DayType=="weekends",], {plot(interval, avg_step, type="l")})
with(avg_newdata[avg_newdata$DayType=="weekdays",], {plot(interval, avg_step, type="l")})
# Plot comparison
#par(mfrow = c(2,1))
#with(wkdays, {plot(interval, avg_steps, type="l", xlab="Time of day", ylab="Avg steps", main="Weekdays Activity Pattern" )})
#with(wkends, {plot(interval, avg_steps, type="l", xlab="Time of day", ylab="Avg steps", main="Weekends Activity Pattern" )})
